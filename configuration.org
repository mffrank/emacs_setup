#+TITLE: Emacs Configuration
#+OPTIONS: toc:nil num:nil

* Configure =use-package=
Install use-package if necessary

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives (append package-archives
                         '(("melpa" . "http://melpa.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ;; ("org" . "http://orgmode.org/elpa/")
                         ("elpy" . "http://jorgenschaefer.github.io/packages/"))))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Enable use-package
(eval-when-compile
(require 'use-package))

(setq use-package-always-ensure t)
#+END_SRC

* Use sensible-defaults.el

Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
#+END_SRC

* =evil-mode=
Use =evil=.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC

Enable =surround= everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC

* UI preferences
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :config
    (load-theme 'solarized-dark t))
#+END_SRC


** Tweak window chrome

I don't usually use the menu, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
;;  (menu-bar-mode 0)
;;  (when window-system
;;    (scroll-bar-mode -1))
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

* Personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Max Frank"
        user-mail-address "max.florian.frank@gmail.com")
#+END_SRC

* Programming customizations

I like shallow indentation, but tabs are displayed as 8 characters by default.
This reduces that.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

Treating terms in CamelCase symbols as separate words makes editing a little
easier for me, so I like to use =subword-mode= everywhere.

#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Magit

I bring up the status menu with =C-x g=.

Use =evil= keybindings with =magit=.
Per [[http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tpope's suggestions]], highlight commit text in the summary line that goes
beyond 50 characters.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)

    :config
    (use-package evil-magit)
    ;;(setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

** R
I edit R code with the ESS package. It allows to run R code directly in emacs,
which is very useful since R is interactive.

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :config
    (require 'ess-site))
#+END_SRC
